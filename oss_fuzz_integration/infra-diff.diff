diff --git a/infra/base-images/base-builder/Dockerfile b/infra/base-images/base-builder/Dockerfile
index df23f03b..2f1acf9f 100644
--- a/infra/base-images/base-builder/Dockerfile
+++ b/infra/base-images/base-builder/Dockerfile
@@ -164,5 +164,8 @@ COPY cargo compile compile_afl compile_dataflow compile_libfuzzer compile_honggf
 COPY llvmsymbol.diff $SRC
 COPY detect_repo.py /opt/cifuzz/
 COPY bazel.bazelrc /root/.bazelrc
+RUN rm -rf /fuzz-introspector/post-processing
+COPY post-processing /fuzz-introspector/post-processing
+COPY frontends /fuzz-introspector/frontends
 
 CMD ["compile"]
diff --git a/infra/base-images/base-builder/compile b/infra/base-images/base-builder/compile
index 6e2bff24..bbc35301 100755
--- a/infra/base-images/base-builder/compile
+++ b/infra/base-images/base-builder/compile
@@ -47,8 +47,8 @@ if [ "$FUZZING_LANGUAGE" = "python" ]; then
     echo "ERROR: Python projects can be fuzzed with libFuzzer engine only."
     exit 1
   fi
-  if [ "$SANITIZER" != "address" ] && [ "$SANITIZER" != "undefined" ] && [ "$SANITIZER" != "coverage" ]; then
-    echo "ERROR: Python projects can be fuzzed with AddressSanitizer or UndefinedBehaviorSanitizer or Coverage only."
+  if [ "$SANITIZER" != "address" ] && [ "$SANITIZER" != "undefined" ] && [ "$SANITIZER" != "coverage" ] && [ "$SANITIZER" != "introspector" ]; then
+    echo "ERROR: Python projects can be fuzzed with AddressSanitizer or UndefinedBehaviorSanitizer or Coverage only or Introspector."
     exit 1
   fi
   if [ "$ARCHITECTURE" != "x86_64" ]; then
@@ -215,34 +215,48 @@ if [ "$SANITIZER" = "introspector" ]; then
   unset CFLAGS
   apt-get install -y libjpeg-dev zlib1g-dev
   pip3 install --upgrade setuptools
-  pip3 install cxxfilt pyyaml beautifulsoup4 lxml soupsieve matplotlib
+  pip3 install cxxfilt pyyaml beautifulsoup4 lxml soupsieve matplotlib html5lib
   mkdir -p $SRC/inspector
 
-  find $SRC/ -name "*.data" -exec cp {} $SRC/inspector/ \;
-  find $SRC/ -name "*.data.yaml" -exec cp {} $SRC/inspector/ \;
+  find $SRC/ -name "fuzzerLogFile-*.data" -exec cp {} $SRC/inspector/ \;
+  find $SRC/ -name "fuzzerLogFile-*.data.yaml" -exec cp {} $SRC/inspector/ \;
   # Move coverage report.
   if [ -d "$OUT/textcov_reports" ]
   then
-    cp $OUT/textcov_reports/*.covreport $SRC/inspector/
+    find $OUT/textcov_reports/ -name *.covreport -exec cp {} $SRC/inspector/ \;
+    find $OUT/textcov_reports/ -name *.json -exec cp {} $SRC/inspector/ \;
   fi
 
   cd $SRC/inspector
 
-  # Correlate fuzzer binaries to fuzz-introspector's raw data
-  python3 /fuzz-introspector/post-processing/main.py correlate --binaries_dir=$OUT/
-
-  # Generate fuzz-introspector HTML report, this generates
-  # the file exe_to_fuzz_introspector_logs.yaml
-  REPORT_ARGS="--target_dir=$SRC/inspector"
-  # Only pass coverage_url when COVERAGE_URL is set (in cloud builds)
-  if [[ ! -z "${COVERAGE_URL+x}" ]]; then
-    REPORT_ARGS="$REPORT_ARGS --coverage_url=${COVERAGE_URL}"
+  # Do different things depending on languages
+  if [ "$FUZZING_LANGUAGE" = "python" ]; then
+    echo "GOING python route"
+    set -x
+    REPORT_ARGS="--target_dir=$SRC/inspector"
+    REPORT_ARGS="$REPORT_ARGS --language=python"
+    python3 /fuzz-introspector/post-processing/main.py report $REPORT_ARGS
+    cp -rf $SRC/inspector $OUT/inspector
+  else
+    # C/C++
+
+    # Correlate fuzzer binaries to fuzz-introspector's raw data
+    python3 /fuzz-introspector/post-processing/main.py correlate --binaries_dir=$OUT/
+
+    # Generate fuzz-introspector HTML report, this generates
+    # the file exe_to_fuzz_introspector_logs.yaml
+    REPORT_ARGS="--target_dir=$SRC/inspector"
+    # Only pass coverage_url when COVERAGE_URL is set (in cloud builds)
+    if [[ ! -z "${COVERAGE_URL+x}" ]]; then
+      REPORT_ARGS="$REPORT_ARGS --coverage_url=${COVERAGE_URL}"
+    fi
+    # Use the just-generated correlation file
+    REPORT_ARGS="$REPORT_ARGS --correlation_file=exe_to_fuzz_introspector_logs.yaml"
+    REPORT_ARGS="$REPORT_ARGS --name=$PROJECT_NAME"
+    python3 /fuzz-introspector/post-processing/main.py report $REPORT_ARGS || true
+
+    cp -rf $SRC/inspector $OUT/inspector
   fi
-  # Use the just-generated correlation file
-  REPORT_ARGS="$REPORT_ARGS --correlation_file=exe_to_fuzz_introspector_logs.yaml"
-  python3 /fuzz-introspector/post-processing/main.py report $REPORT_ARGS
-
-  cp -rf $SRC/inspector $OUT/inspector
 fi
 
 if [[ "$FUZZING_ENGINE" = "dataflow" ]]; then
diff --git a/infra/base-images/base-builder/compile_python_fuzzer b/infra/base-images/base-builder/compile_python_fuzzer
index e7c7f0a3..829db7d1 100755
--- a/infra/base-images/base-builder/compile_python_fuzzer
+++ b/infra/base-images/base-builder/compile_python_fuzzer
@@ -24,6 +24,23 @@ fuzzer_package=${fuzzer_basename}.pkg
 PYFUZZ_WORKPATH=$SRC/pyfuzzworkdir/
 FUZZ_WORKPATH=$PYFUZZ_WORKPATH/$fuzzer_basename
 
+if [[ $SANITIZER = *introspector* ]]; then
+    pip3 install pyyaml
+    #rm -rf ./PyCG
+    #git clone --depth=1 https://github.com/AdaLogics/PyCG
+    export PYTHONPATH="/fuzz-introspector/frontends/python/PyCG/"
+    #export PYTHONPATH=$PWD/PyCG/
+
+    ARGS="--fuzzer $fuzzer_path"
+    if [ -n "${PYFUZZPACKAGE-}" ]; then
+      ARGS="$ARGS --package=${PYFUZZPACKAGE}"
+      ARGS="$ARGS --scan"
+    fi
+    python3 /fuzz-introspector/frontends/python/main.py $ARGS
+    ls -la ./
+    exit 0
+fi
+
 # In coverage mode prepend coverage logic to the fuzzer source
 if [[ $SANITIZER = *coverage* ]]; then
   cat <<EOF > coverage_wrapper.py
diff --git a/infra/base-images/base-clang/Dockerfile b/infra/base-images/base-clang/Dockerfile
index 4c0e50f7..2a15a429 100644
--- a/infra/base-images/base-clang/Dockerfile
+++ b/infra/base-images/base-clang/Dockerfile
@@ -42,6 +42,8 @@ RUN apt-get update && apt-get install -y git && \
 COPY checkout_build_install_llvm.sh /root/
 # Keep all steps in the same script to decrease the number of intermediate
 # layes in docker file.
+RUN rm -rf /fuzz-introspector
+COPY fuzz-introspector fuzz-introspector
 RUN /root/checkout_build_install_llvm.sh
 RUN rm /root/checkout_build_install_llvm.sh
 
diff --git a/infra/base-images/base-runner/coverage b/infra/base-images/base-runner/coverage
index 400247bf..a12a5af4 100755
--- a/infra/base-images/base-runner/coverage
+++ b/infra/base-images/base-runner/coverage
@@ -310,13 +310,20 @@ elif [[ $FUZZING_LANGUAGE == "python" ]]; then
     mv $OUT/.coverage_$fuzzer .coverage
     python3 /usr/local/bin/python_coverage_runner_help.py translate /pythoncovmergedfiles/medio
     cp .new_coverage $PYCOVDIR/.coverage_$fuzzer
+    cp .new_coverage $OUT/coverage_d_$fuzzer
   done
 
   # Combine coverage
   cd $PYCOVDIR
   python3 /usr/local/bin/python_coverage_runner_help.py combine .coverage_*
   python3 /usr/local/bin/python_coverage_runner_help.py html
+  python3 /usr/local/bin/python_coverage_runner_help.py json -o ${TEXTCOV_REPORT_DIR}/all_cov.json
+  #find htmlcov/ -name "*.json" -exec cp {} ${TEXTCOV_REPORT_DIR}/ \;
+  cp htmlcov/status.json ${TEXTCOV_REPORT_DIR}/html_status.json
+  cp -rf htmlcov $OUT/DDDD
+
   mv htmlcov/* $REPORT_PLATFORM_DIR/
+  mv .coverage_* $REPORT_PLATFORM_DIR/
 
   # Create an empty summary file for now
   echo "{}" >> $SUMMARY_FILE
@@ -399,5 +406,5 @@ if [[ -n $HTTP_PORT ]]; then
   # Serve the report locally.
   echo "Serving the report on http://127.0.0.1:$HTTP_PORT/linux/index.html"
   cd $REPORT_ROOT_DIR
-  python3 -m http.server $HTTP_PORT
+  #python3 -m http.server $HTTP_PORT
 fi
diff --git a/infra/helper.py b/infra/helper.py
index ad417375..35223b86 100755
--- a/infra/helper.py
+++ b/infra/helper.py
@@ -642,6 +642,7 @@ def build_fuzzers_impl(  # pylint: disable=too-many-arguments,too-many-locals,to
       'FUZZING_ENGINE=' + engine,
       'SANITIZER=' + sanitizer,
       'ARCHITECTURE=' + architecture,
+      'PROJECT_NAME=' + project.name
   ]
 
   _add_oss_fuzz_ci_if_needed(env)
diff --git a/projects/ansible/fuzz_parse.py b/projects/ansible/fuzz_parse.py
index 5da20f3a..9cf176b5 100644
--- a/projects/ansible/fuzz_parse.py
+++ b/projects/ansible/fuzz_parse.py
@@ -35,7 +35,7 @@ def TestInput(input_bytes):
         # Test quoting module
         quoting.is_quoted(fdp.ConsumeString(10))
         quoting.unquote(fdp.ConsumeString(10))
-    except (AnsibleError, AnsibleParserError) as e:
+    except (AnsibleError, AnsibleParserError, IndexError) as e:
         pass
 
 
diff --git a/projects/croniter/fuzz_iter.py b/projects/croniter/fuzz_iter.py
index 7ba559bf..c0a5199a 100644
--- a/projects/croniter/fuzz_iter.py
+++ b/projects/croniter/fuzz_iter.py
@@ -26,6 +26,7 @@ with atheris.instrument_imports():
   )
 
 
+@atheris.instrument_func
 def TestOneInput(data):
   fdp = atheris.FuzzedDataProvider(data)
   base = datetime(2012, 4, 6, 13, 26, 10)
@@ -45,6 +46,7 @@ def TestOneInput(data):
 
 
 def main():
+  atheris.instrument_all()
   atheris.Setup(sys.argv, TestOneInput, enable_python_coverage=True)
   atheris.Fuzz()
 
diff --git a/projects/git/build.sh b/projects/git/build.sh
index 8770a831..3518b278 100755
--- a/projects/git/build.sh
+++ b/projects/git/build.sh
@@ -15,6 +15,8 @@
 #
 ################################################################################
 
+unset FUZZ_INTROSPECTOR
+
 # build fuzzers
 make -j$(nproc) CC=$CC CXX=$CXX CFLAGS="$CFLAGS" FUZZ_CXXFLAGS="$CXXFLAGS" \
   LIB_FUZZING_ENGINE=$LIB_FUZZING_ENGINE fuzz-all
diff --git a/projects/opensc/build.sh b/projects/opensc/build.sh
index 84ab497e..65315161 100755
--- a/projects/opensc/build.sh
+++ b/projects/opensc/build.sh
@@ -18,7 +18,7 @@
 ./bootstrap
 # FIXME FUZZING_LIBS="$LIB_FUZZING_ENGINE" fails with some missing C++ library, I don't know how to fix this
 ./configure --disable-optimization --disable-shared --disable-pcsc --enable-ctapi --enable-fuzzing FUZZING_LIBS="$LIB_FUZZING_ENGINE"
-make -j4
+make -j4 V=1
 
 fuzzerFiles=$(find $SRC/opensc/src/tests/fuzzing/ -name "fuzz_*.c")
 
diff --git a/projects/pyyaml/build.sh b/projects/pyyaml/build.sh
index 98f406ad..62485ae4 100644
--- a/projects/pyyaml/build.sh
+++ b/projects/pyyaml/build.sh
@@ -14,7 +14,10 @@
 # limitations under the License.
 #
 ################################################################################
+
+
 cd pyyaml
+export PYFUZZPACKAGE=$PWD/lib/
 python3 ./setup.py --without-libyaml install
 
 # Build fuzzers in $OUT.
diff --git a/projects/xlrd/build.sh b/projects/xlrd/build.sh
index 95f3540d..bb770cfa 100644
--- a/projects/xlrd/build.sh
+++ b/projects/xlrd/build.sh
@@ -18,6 +18,7 @@
 pip3 install .
 
 # Build fuzzers in $OUT.
+export PYFUZZPACKAGE=$PWD/xlrd
 for fuzzer in $(find $SRC -name 'fuzz_*.py'); do
   compile_python_fuzzer $fuzzer
 done
